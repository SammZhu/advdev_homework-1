#!groovy

// Jenkinsfile for MLBParks
// Create a slave 
  podTemplate(
  label: "mlbparks-build",
  inheritFrom: "maven",
  cloud: "openshift",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/cpd-jenkins/maven-slave-pod",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('mlbparks-build') {

    // Define Maven command
    def mvnCmd = "mvn -s ./nexus_settings.xml"

    // Checkout Source Code
    stage('Checkout Source') {
      echo "Checking out Source Code"
      git url: 'https://github.com/carl-durrant/advdev_homework.git'

    }    

     // Extract version and other properties from the pom.xml
    def groupId = getGroupIdFromPom("./MLBParks/pom.xml")
    def artifactId = getArtifactIdFromPom("./MLBParks/pom.xml")
    def version = getVersionFromPom("./MLBParks/pom.xml")

    // Set the tag for the development image: version + build number
    def devTag = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    // Use Maven to build the war file
    stage('Build war') {
      echo "Building version ${devTag}"
      sh "${mvnCmd} -f ./MLBParks/pom.xml clean package -DskipTests"
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      echo "Running Unit Tests"
      sh "${mvnCmd} -f ./MLBParks/pom.xml test"
  }

    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      echo "Running Code Analysis"
      sh "${mvnCmd} -f ./MLBParks/pom.xml sonar:sonar -Dsonar.host.url=http://sonarqube.cpd-sonarqube.svc.cluster.local:9000 -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
  }

    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      echo "Publish to Nexus"
      sh "${mvnCmd} -f ./MLBParks/pom.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.cpd-nexus.svc.cluster.local:8081/repository/releases"
  }

    // Build the OpenShift Image in OpenShift
    stage('Build and Tag OpenShift Image') {
    echo "Building OpenShift container image tasks:${devTag}"
    // Start Binary Build in OpenShift using the file we just published
    sh "oc start-build mlbparks --follow --from-file=http://nexus3.cpd-nexus.svc.cluster.local:8081/repository/releases/com/openshift/evg/roadshow/mlbparks/${version}/mlbparks-${version}.war -n cpd-parks-dev"

    // Tag the image using the devTag
    openshiftTag alias: 'false', destStream: 'mlbparks', destTag: devTag, destinationNamespace: 'cpd-parks-dev', namespace: 'cpd-parks-dev', srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
  }

    // Deploy the built image to the Development Environment
    stage('Deploy to Dev') {
    echo "Deploying container image to Development Project"

    // Update the Image on the Development Deployment Config
    sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/cpd-parks-dev/mlbparks:${devTag} -n cpd-parks-dev"

    // Update the Config Map which contains the config for the mlbparks application
    sh "oc delete configmap mlbparks-config -n cpd-parks-dev --ignore-not-found=true"

    sh "oc create configmap mlbparks-config --from-literal=APPNAME='MLB Parks (Blue)' \
    --from-literal=DB_HOST=mongodb --from-literal=DB_NAME=parks --from-literal=DB_PASSWORD=mongodb \
    --from-literal=DB_PORT=27017 --from-literal=DB_USERNAME=mongodb -n cpd-parks-dev"
    
    sh "oc set env dc/mlbparks --from=configmap/mlbparks-config"

    // Deploy the development application
    openshiftDeploy depCfg: 'mlbparks', namespace: 'cpd-parks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: 'mlbparks', namespace: 'cpd-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: 'cpd-parks-dev', svcName: 'mlbparks', verbose: 'false'
  }

  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
