#!groovy

// Jenkinsfile for MLBParks
// Create a slave 
  podTemplate(
  label: "mlbparks-build",
  inheritFrom: "maven",
  cloud: "openshift",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/cpd-jenkins/maven-slave-pod",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('mlbparks-build') {

    // Define Maven command
    def mvnCmd = "mvn -s ./nexus_settings.xml"

    // Checkout Source Code
    stage('Checkout source code') {
      echo "Checking out Source Code"
      git url: 'https://github.com/carl-durrant/advdev_homework.git'
    }    

     // Extract version and other properties from the pom.xml
    def groupId = getGroupIdFromPom("./MLBParks/pom.xml")
    def artifactId = getArtifactIdFromPom("./MLBParks/pom.xml")
    def version = getVersionFromPom("./MLBParks/pom.xml")

    // Set the tag for the development image: version + build number
    def devTag = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    // Use Maven to build the war file
    stage('Build Java war') {
      echo "Building version ${devTag}"
      sh "${mvnCmd} -f ./MLBParks/pom.xml clean package -DskipTests"
    }

    // Use Maven run the unit tests
    stage('Run Unit Tests') {
      echo "Running Unit Tests"
      sh "${mvnCmd} -f ./MLBParks/pom.xml test"
    }

    // Use Maven call SonarQube for Code Analysis
    stage('Inspect Code Quality') {
      echo "Running Code Analysis"
      sh "${mvnCmd} -f ./MLBParks/pom.xml sonar:sonar -Dsonar.host.url=http://sonarqube.cpd-sonarqube.svc.cluster.local:9000 -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
    } 

    // Publish the built war file to Nexus
    stage('Publish Nexus Artifact') {
      echo "Publish to Nexus"
      sh "${mvnCmd} -f ./MLBParks/pom.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.cpd-nexus.svc.cluster.local:8081/repository/releases"
    }

    // Build the OpenShift Image in OpenShift
    stage('Build and Tag OpenShift Image') {
    echo "Building OpenShift container image tasks:${devTag}"
    // Start Binary Build in OpenShift using the file we just published
    sh "oc start-build mlbparks --follow --from-file=http://nexus3.cpd-nexus.svc.cluster.local:8081/repository/releases/com/openshift/evg/roadshow/mlbparks/${version}/mlbparks-${version}.war -n cpd-parks-dev"

    // Tag the image using the devTag
    openshiftTag alias: 'false', destStream: 'mlbparks', destTag: devTag, destinationNamespace: 'cpd-parks-dev', namespace: 'cpd-parks-dev', srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
    }

    // Deploy the built image to the Development Environment
    stage('Verify deploy in Dev') {
    echo "Deploying container image to Development Project"

    // Update the Image on the Development Deployment Config
    sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/cpd-parks-dev/mlbparks:${devTag} -n cpd-parks-dev"

    // Update the Config Map which contains the config for the mlbparks application
    sh "oc delete configmap mlbparks-config -n cpd-parks-dev --ignore-not-found=true"

    sh "oc create configmap mlbparks-config \
                  --from-literal=APPNAME='MLB Parks (Blue)' \
                  --from-literal=DB_HOST=mongodb \
                  --from-literal=DB_NAME=parks \
                  --from-literal=DB_PASSWORD=mongodb \
                  --from-literal=DB_PORT=27017 \
                  --from-literal=DB_USERNAME=mongodb \
                  -n cpd-parks-dev"

    sh "oc set env dc/mlbparks --from=configmap/mlbparks-config -n cpd-parks-dev" 

    // Deploy the development application
    openshiftDeploy depCfg: 'mlbparks', namespace: 'cpd-parks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: 'mlbparks', namespace: 'cpd-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: 'cpd-parks-dev', svcName: 'mlbparks', verbose: 'false'
    }

    // Run Integration Tests in the Development Environment
    stage('Run Integration Test') {
    echo "Running Integration Tests"
    sleep 3

    // 
    echo "Testing health endpoint"
    sh "curl GET http://mlbparks.cpd-parks-dev.svc:8080/ws/healthz/"
    }

    // Copy Image to Nexus Docker Registry
    stage('Copy Image to Nexus Docker Registry') {
    echo "Copy image to Nexus Docker Registry"
    sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/cpd-parks-dev/mlbparks:${devTag} docker://nexus-registry.cpd-nexus.svc:5001/mlbparks:${devTag}"

    // Tag the built image with the production tag
    openshiftTag alias: 'false', destStream: 'mlbparks', destTag: prodTag, destinationNamespace: 'cpd-parks-dev', namespace: 'cpd-parks-dev', srcStream: 'mlbparks', srcTag: devTag, verbose: 'false'
    }

    // Blue/Green Deployment into Production
    def destApp   = "mlbparks-green"
    def destcfgMap = "Green"
    def activeApp = ""

    stage('Blue/Green Production Deployment') {
    // Deploy the idle application alongside the active application 
    activeApp = sh(returnStdout: true, script: "oc get route mlbparks -n cpd-parks-prod -o jsonpath='{ .spec.to.name }'").trim()
    if (activeApp == "mlbparks-green") {
      destApp = "mlbparks-blue"
      destcfgMap = "Blue"
    }
    echo "Active Application:      " + activeApp
    echo "Destination Application: " + destApp
    echo "Config Map to be used:   " + destcfgMap

    // Update the Image on the Production Deployment Config
    sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/cpd-parks-dev/mlbparks:${prodTag} -n cpd-parks-prod"

    // Update the Config Map 
    sh "oc delete configmap ${destApp}-config -n cpd-parks-prod --ignore-not-found=true"
    sh "oc create configmap ${destApp}-config \
                  --from-literal=APPNAME='MLB Parks (${destcfgMap})' \
                  --from-literal=DB_HOST=mongodb \
                  --from-literal=DB_NAME=mongodb \
                  --from-literal=DB_PASSWORD=mongodb \
                  --from-literal=DB_PORT=27017 \
                  --from-literal=DB_USERNAME=mongodb \
                  -n cpd-parks-prod"

    sh "oc set env dc/${destApp} --from=configmap/${destApp}-config -n cpd-parks-prod"               

    // Deploy the inactive application
    openshiftDeploy depCfg: destApp, namespace: 'cpd-parks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: destApp, namespace: 'cpd-parks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: 'cpd-parks-prod', svcName: destApp, verbose: 'false'

    // Delete and recreate the service so that the label selector is applied by the refresh of parksmap cache 
    sh "oc delete svc ${destApp} -n cpd-parks-prod"
    sh "oc expose dc ${destApp} --port 8080 --labels=type=parksmap-backend -n cpd-parks-prod"

    }

    stage('Switch route to new Version') {
    echo "Switching Production application to ${destApp}."
    sh 'oc patch route mlbparks -n cpd-parks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
